#version 330 core
out vec2 FragmentColour;
in vec2 TextureCoords;

const float PI = 3.14159265359f;
// VanDerCorput - relevant calculation - difficult to understand at first:Holger Dammertz. 
// Mirrors a decimal binary representation around its decimal point. We can generate a sequence 
// sample i of total number of samples N. 
// The following helped me in understanding: https://rosettacode.org/wiki/Van_der_Corput_sequence. 
// Some versions of openGL do not support bitwise operations - but is less optimized - thats why I chose to use bitwise operators.
float RadicalInverse(uint bits) 
{
     bits = (bits << 16u) | (bits >> 16u);
     bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
     bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
     bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	 // bitwise operators
     bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
     return float(bits) * 2.3283064365386963e-10;
}

// Returns a vector 2 by passing two int params as nominator and denominator as well as the radical inverse of the first int. 
// This is known as the Hammersley sequence. - probability theory, Holger Dammertz. Based on Van Der Coput sequence which mirrors a binary 
// representation around the relevant center point. Our machines should support bit operators - ES2.0 won't.
vec2 HammersleyEquation(uint i, uint N)
{
	return vec2(float(i)/float(N), RadicalInverse(i));
}

// Generating sample vectors biased towards refelction orientation - microsurface halfway vector - roughness. 
// Generate low discrepency sequence use this sequence value to find a tangent space sample value, transform to world space and  
// find the relevant radiance value. Note: Specular Lobe - Epic Games was a refereence for this method and rather a large portion 
// of this project (as well as Disneys research paper).
vec3 ImportanceSample(vec2 Xi, vec3 N, float roughness)
{
	float a = roughness*roughness;
	
	float phi = 2.0 * PI * Xi.x;
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
	vec3 H; // h-vec
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;
	
	// convert from t_space to world space
	vec3 up   = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangent   = normalize(cross(up, N));
	vec3 bitangent = cross(N, tangent);
	
	vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
	return normalize(sampleVec);
}

// Calculate the ration between roughness and reflectivness. Schlick-Beckmann approximation - Geometry Function.  
// approximates the ratio of relevant microfacets that overshadow each other - light energy is dispersed as a result. 
// Rough = more overlaps. Normal, View & Light direction passed from Smiths geometry equation - a float is returned: 
// the dot product of the Normal and View direction divided by this dot product multiplied by k (this small equation was 
// inspired by epic games which uses the squared roughness for a more realistic look).
float Schlick(float NdotV, float roughness)
{
    float a = roughness; // already squared - EPIC GAMES research paper.
    float k = (a * a) / 2.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}

// Geometry Obstruction & Shadowing. - Better approximation of geometry when combined with Schlick equation. [range of values between 0, 1. 
// 0=no shadows, 1 = microfacet shadowing. returns a float which is the combination of two reflection values passed back from Schlicks 
// equation with the view direction and light direction as parameters.
float Smith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ref2 = Schlick(NdotV, roughness);
    float ref1 = Schlick(NdotL, roughness);

    return ref1 * ref2;
}

// This is the main portion of the BRDF shader - possibly the most difficult portion of the entire project. 
// We are able to convolute the relevant BRDF equations baed upon their input, roughness as well as the angle between 
// the normal and hemisphere w0. We can store this result into a texture - a 2D lookup texture called LUT - BRDF Integration map. 
// This func uses 2D texture coordinates as inputs.  We also process the sample vector based upon the geometry function and the 
// Freshnel Schlick approximation function. Angle theta as well as roughness is taken into account to generate a sample vector with
// importance sampling, this is then passed over the geometry func and freshnel func also. The obout is scaled and bias accordingly 
// for each result and then averaged accordingly.
vec2 IntegrateBRDF(float roughness, float NdotV)
{
    vec3 V;
    V.x = sqrt(1.0 - NdotV*NdotV);
    V.y = 0.0;
    V.z = NdotV;

    float A = 0.0;
    float B = 0.0; 

    vec3 N = vec3(0.0, 0.0, 1.0);
    
    const uint SAMPLE_COUNT = 1024u;
    for(uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        // importance sampling - sorting algo for efficiency and population size.
        vec2 Xi = HammersleyEquation(i, SAMPLE_COUNT);
        vec3 H = ImportanceSample(Xi, N, roughness);
        vec3 L = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(L.z, 0.0);
        float NdotH = max(H.z, 0.0);
        float VdotH = max(dot(V, H), 0.0);

        if(NdotL > 0.0)
        {
            float G = Smith(N, V, L, roughness);
            float G_Vis = (G * VdotH) / (NdotH * NdotV);
            float Fc = pow(1.0 - VdotH, 5.0);

            A += (1.0 - Fc) * G_Vis;
            B += Fc * G_Vis;
        }
    }
    A /= float(SAMPLE_COUNT);
    B /= float(SAMPLE_COUNT);
    return vec2(A, B);
}

// In this method we simply use the Integrate method to return the x and Y value for the BRDF vec2 and use it to assign the Fragment Colour.
void main() 
{
    vec2 BRDF = IntegrateBRDF(TextureCoords.y, TextureCoords.x);
    FragmentColour = BRDF;
}