#version 330 core
out vec4 FragmentColour;
in vec3 WorldPos;

uniform samplerCube environmentMap;
uniform float roughness;

const float PI = 3.14159265359f;

// VanDerCorput - relevant calculation - difficult to understand at first:Holger Dammertz. 
// Mirrors a decimal binary representation around its decimal point. We can generate a sequence 
// sample i of total number of samples N. 
// The following helped me in understanding: https://rosettacode.org/wiki/Van_der_Corput_sequence. 
// Some versions of openGL do not support bitwise operations - but is less optimized - thats why I chose to use bitwise operators.
float RadicalInverse(uint bits) 
{
     bits = (bits << 16u) | (bits >> 16u);
     bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
     bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
     bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
     bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	 	 // bitwise operators

     return float(bits) * 2.3283064365386963e-10; 
}

// Returns a vector 2 by passing two int params as nominator and denominator as well as the radical inverse of the first int. 
// This is known as the Hammersley sequence. - probability theory, Holger Dammertz. Based on Van Der Coput sequence which mirrors a binary 
// representation around the relevant center point. Our machines should support bit operators - ES2.0 won't.
vec2 Hammersley(uint i, uint N)
{
	return vec2(float(i)/float(N), RadicalInverse(i));
}

// Generating sample vectors biased towards refelction orientation - microsurface halfway vector - roughness. 
// Generate low discrepency sequence use this sequence value to find a tangent space sample value, transform to world space and  
// find the relevant radiance value. Note: Specular Lobe - Epic Games was a refereence for this method and rather a large portion 
// of this project (as well as Disneys research paper).
vec3 ImportanceSample(vec2 Xi, vec3 N, float roughness)
{
	float a = roughness*roughness;
	
	float phi = 2.0 * PI * Xi.x;
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
	vec3 H;
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;
	
	vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangent   = normalize(cross(up, N));
	vec3 bitangent = cross(N, tangent);
	
	vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
	return normalize(sampleVec);
}

// specular distribution - approximates the ratio of microfacets aligned to a halfway vector. - Trowbridge-Reitz GGX
// Halfway vector is used to measure the microfacets - roughness. If we take this to be between the surface normal and light direction
// over a varying roughness then we get to see how both the diffuse/sepecular component can be approximated yet still adhering to
// the conservation of energy principle. i.e. large diffue area (weak) -> small specular area (strong).

// If roughness is low (smooth) then the microfacets are concentrated and aligned close to the halfway vector over a very small radius.
// While when rough their orentiation is more spread out and (random) as a result.
// Epic games chose to square the roughness for nice effect.
float Distribution(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float aSqu = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = aSqu;
    float denom = (NdotH2 * (aSqu - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

// The main maths behind prefiltering. Using a low-discrepancy Hammersley sequence and relevant sample generation
// Essentailly we are able to "pre-filter" the environment outside of real time (would be too expensive to do in real time). Using a roughness input that varies over mipmap levels of prefiltered cubemap [0,1].
// This is the prefiltered colour - divided by the sample weight for an average and more plausible result. - i.e. samples with more influence have a bigger impact on the final result while outliers will not.
// Again we normalize our nomal and calculate our Reflection and V vectors as well as the sample count.
// We then use our importance sampling- distribution funcs etc for the varying mip maps levels so that all this information is generated in advance.
// We use this (samples over mipmap levels with varying influences) to generate our fragment colour to be passed on.
void main()
{		
    vec3 N = normalize(WorldPos);
    
    vec3 R = N;
    vec3 V = R;

    const uint SAMPLE_COUNT = 1024U; // size parameter
    vec3 prefilteredColour = vec3(0.0);
    float totalWeight = 0.0;
    
    for(uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        vec2 Xi = Hammersley(i, SAMPLE_COUNT);
        vec3 H = ImportanceSample(Xi, N, roughness);
        vec3 L  = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(dot(N, L), 0.0);
        if(NdotL > 0.0)
        {
            float D   = Distribution(N, H, roughness);
            float NdotH = max(dot(N, H), 0.0);
            float HdotV = max(dot(H, V), 0.0);
            float pdf = D * NdotH / (4.0 * HdotV) + 0.0001; 

            float resolution = 1028.0; // how detailed the final resolution will be
            float saTexel  = 4.0 * PI / (6.0 * resolution * resolution);
            float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001); // never == 0.0
            float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel); 
            
            prefilteredColour += textureLod(environmentMap, L, mipLevel).rgb * NdotL;
            totalWeight      += NdotL;
        }
    }

    prefilteredColour = prefilteredColour / totalWeight;

    FragmentColour = vec4(prefilteredColour, 1.0);
}
